javascript:(async function(){    const apiKey = "YOUR_API_KEY_HERE";    let questionType = null, questionText = "", prompt = "";        async function fetchChatGPTResponse(retries = 3, model = "gpt-4") {        try {            console.log("Sending the following prompt to ChatGPT:", prompt);            const response = await fetch("https://api.openai.com/v1/chat/completions", {                method: "POST",                headers: {                    "Content-Type": "application/json",                    "Authorization": `Bearer ${apiKey}`                },                body: JSON.stringify({                    model: model,                    messages: [{ role: "user", content: prompt }]                })            });            if (response.status === 429) {                if (retries > 0) {                    console.warn("Rate limit exceeded for GPT-4. Retrying with GPT-4-0314...");                    await new Promise(resolve => setTimeout(resolve, 5000));                    return fetchChatGPTResponse(retries - 1, "gpt-4-0314");                } else {                    throw new Error("Too many requests. Please try again later.");                }            }            if (response.status === 401) {                alert("This API has been temporarily Disabled");                return null;            }            const data = await response.json();            return data.choices[0].message.content;        } catch (error) {            console.error("Error with API request:", error);            alert("There was an error connecting to the ChatGPT API.");            return null;        }    }    const gui = document.createElement('div');    gui.style.position = 'fixed';    gui.style.top = '10px';    gui.style.left = '10px';    gui.style.padding = '10px';    gui.style.backgroundColor = '#fff';    gui.style.border = '1px solid #000';    gui.style.zIndex = '9999';    gui.style.maxWidth = '400px';    gui.style.fontFamily = 'Arial, sans-serif';    const title = document.createElement('h3');    title.innerText = 'Scraper Results';    gui.appendChild(title);    const runButton = document.createElement('button');    runButton.innerText = 'Run';    runButton.style.marginBottom = '10px';    gui.appendChild(runButton);    const resultContainer = document.createElement('div');    resultContainer.style.marginTop = '10px';    resultContainer.style.maxHeight = '300px';    resultContainer.style.overflowY = 'scroll';    resultContainer.style.border = '1px solid #ddd';    resultContainer.style.padding = '5px';    resultContainer.style.fontSize = '14px';    gui.appendChild(resultContainer);    document.body.appendChild(gui);    const hideButton = document.createElement('button');    hideButton.innerText = 'Hide';    hideButton.style.position = 'fixed';    hideButton.style.top = '10px';    hideButton.style.right = '10px';    hideButton.style.zIndex = '10000';    hideButton.style.padding = '5px';    hideButton.style.fontSize = '12px';    hideButton.style.cursor = 'pointer';    document.body.appendChild(hideButton);    const unhideButton = document.createElement('button');    unhideButton.innerText = 'Unhide';    unhideButton.style.position = 'fixed';    unhideButton.style.bottom = '5px';    unhideButton.style.left = '5px';    unhideButton.style.zIndex = '10001';    unhideButton.style.padding = '5px';    unhideButton.style.fontSize = '0px';    unhideButton.style.cursor = 'pointer';    unhideButton.style.display = 'none';    document.body.appendChild(unhideButton);    hideButton.addEventListener('click', function () {        gui.style.display = 'none';        unhideButton.style.display = 'block';        hideButton.style.display = 'none';    });    unhideButton.addEventListener('click', function () {        gui.style.display = 'block';        unhideButton.style.display = 'none';        hideButton.style.display = 'block';    });    async function scrapeQuestion() {        questionType = null;        questionText = "";        prompt = "";        const trueFalseHeader = document.querySelector('h2.probe-header');                if (trueFalseHeader && trueFalseHeader.innerText.includes("True or False Question")) {            questionType = "true-or-false";            const questionParagraph = document.querySelector('.prompt') || trueFalseHeader.nextElementSibling;            if (questionParagraph) {                questionText = questionParagraph.innerText.trim();                prompt = %60Question: ${questionText}\n\nIs the statement True or False? Please answer with "True" or "False".%60;            }        } else if (document.querySelector('h2.probe-header') && document.querySelector('h2.probe-header').innerText.includes("Fill in the Blank Question")) {            questionType = "fill-in-the-blank";            const questionParagraph = document.querySelector('.prompt') || trueFalseHeader.nextElementSibling;            if (questionParagraph) {                questionText = questionParagraph.innerText.trim();                const blanks = questionParagraph.querySelectorAll('input.fitb-input');                const blankCount = blanks.length;                if (blankCount > 0) {                    questionText = questionText.replace(/\s*<input[^>]*>\s*/g, " ___ ");                    prompt = %60Question: ${questionText}\n\nPlease fill in the blanks with the correct terms. Write the answers in the following format:\n%60;                    for (let i = 1; i <= blankCount; i++) {                        prompt += %60${i}. "answer to blank ${i}"\n%60;                    }                }            }        } else if (document.querySelector('.choice-item')) {            questionType = "ordering";            const orderingChoices = [];            const choiceItems = document.querySelectorAll('.choice-item');            if (choiceItems.length > 0) {                choiceItems.forEach(choice => {                    const choiceText = choice.innerText.trim();                    orderingChoices.push(choiceText);                });                questionText = "Order the following choices correctly:";                prompt = %60Question: ${questionText}\nChoices:\n%60 + orderingChoices.map((choice, index) => %60${index + 1}. ${choice}%60).join("\n") + "\n\nWhat is the correct order of these choices?";            }        } else if (document.querySelector('.match-row')) {            questionType = "matching";            const matchingPairs = [];            const matchRows = document.querySelectorAll('.match-row');            if (matchRows.length > 0) {                matchRows.forEach(row => {                    const leftColumnContent = row.querySelector('.match-prompt .content p');                    const rightColumnContent = row.querySelector('.choice-item .content p');                    if (leftColumnContent && rightColumnContent) {                        const leftText = leftColumnContent.innerText.trim();                        const rightText = rightColumnContent.innerText.trim();                        matchingPairs.push({ leftText, rightText });                    }                });                questionText = "Match the following items:";                prompt = %60Question: ${questionText}\n\nHere are the pairs to match:\n%60 + matchingPairs.map((pair, index) => %60${index + 1}. ${pair.leftText} -> ${pair.rightText}%60).join("\n") + "\n\nPlease match each item on the left with its correct pair on the right.";            }        } else if (document.querySelector('.choice-row')) {            questionType = "multiple-choice";            const mcQuestionDiv = document.querySelector('.prompt');            if (mcQuestionDiv) {                questionText = mcQuestionDiv.innerText.trim();                const answers = [];                const choicesContainer = document.querySelector('.responses-container');                if (choicesContainer) {                    const choices = choicesContainer.querySelectorAll('.choice-row');                    choices.forEach(choice => {                        const answerText = choice.innerText.trim();                        answers.push(answerText);                    });                    prompt = %60Question: ${questionText}\nAnswers:\n%60 + answers.map((answer, index) => %60${index + 1}. ${answer}%60).join("\n") + "\n\nWhich answer(s) is/are correct?";                }            }        } else {            alert("Question type not recognized.");            return;        }    }    async function runScraper() {        resultContainer.textContent = "Loading...";        await scrapeQuestion();        const chatResponse = await fetchChatGPTResponse();        if (chatResponse) {            resultContainer.textContent = %60Scraped Answers:\n${chatResponse}%60;        } else {            resultContainer.textContent = "No response from the API.";        }    }    runButton.addEventListener('click', runScraper);})();